<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_textbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
randString[0] = "xX_FluffyBunny_Xx"
randString[1] = "KillerGirl47"
randString[2] = "BunnyFace01"
randString[3] = "X_Cute_X"
randString[4] = "xXx_Kitteh_xXx"
randString[5] = "Neko_Kitty"
randString[6] = "Kitty_Neko"
randString[7] = "Neko_Cutie"
randString[8] = "Cute_Gamergirl"
randString[9] = "OMGCOOKIES"
randString[10] = "Fluttersky"
randString[11] = "Munchykins"
randString[12] = "OMGnoob"
randString[13] = "CookieSniper"
randString[14] = "Derpina-Chan"
randString[15] = "Poro_Poro"
randString[16] = "Chocobo_Burrito"
randString[17] = "Taco_Cat"
randString[18] = "HuggyBunny"
randString[19] = "_Munch_"
randString[20] = "&lt;3 Otaku Æ¸&gt;"
randString[21] = "x_CookieFace_x"
randString[22] = "~PuppyLove~"
randString[23] = "~Cutiemark~"
randString[24] = "~HuggsCats~"
randString[25] = "~PussyKitty~"

randIndex = irandom(25)
global.money = 500;
global.currentday = 1;
global.maxenergy = 100;
global.maxfocus = 100;
global.energy = 100

//-------------------------------------
// Variables that change the appearence
//-------------------------------------

//How many steps that the cursor should be visible/invisible
cursorBlinkTime = room_speed / 2;
//The color of the text
textColor = c_black;
//The transparancy of the text
textAlpha = 1;
//What text the textbox should have when created
text = "";
//The transparancy of the selected area
selectionAlpha = .4;
//The color of the selected area
selectionColor = c_blue;
//The transparancy of the selected area when the textbox loses focus
selectionUnfocusAlpha = .4;
//The color of the selected area when the textbox loses focus
selectionUnfocusColor = c_gray;

//----------------------------------------
// Variables that needs to be initialized 
//----------------------------------------

selected = false;
showCursor = false;
cursor = 0;
cursorPosition = 0;
selectedStart = -1;
keyDownTime = 0;
keyDownPrevious = 0;
offset = 0;
dragSelecting = false;
surf = surface_create(x + sprite_width, y + sprite_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>showCursor = !showCursor;
alarm[0] = cursorBlinkTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Calculate offset
cursorPosition = x + string_width(string_copy(text, 1, cursor)) + 2 - offset;
if(cursorPosition &lt; x)
{
    cursorPosition = x + 6;
    offset = string_width(string_copy(text, 1, cursor));
}
else if(cursorPosition &gt;= x + sprite_width)
{
    cursorPosition = x + sprite_width - 4;
    offset = string_width(string_copy(text, 1, cursor)) - sprite_width + 6;
}
if(offset &lt; 0)
{
    offset = 0;
    cursorPosition = x + string_width(string_copy(text, 1, cursor)) + 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(selected)
{
    if(keyboard_lastkey == keyDownPrevious)
    {
        keyDownTime += 1;
    }
    else
    {
        keyDownTime = 0;
    }
    if(keyboard_check(vk_backspace) &amp;&amp; string_length(text) &gt; 0 &amp;&amp; (keyDownTime == 0 || keyDownTime &gt;= room_speed / 2))
    {
        if(selectedStart != -1)
            textbox_text_selected_remove(id);
        else
        {
            text = string_delete(text, cursor, 1);
            cursor -= 1;
        }   
        showCursor = true;
        alarm[0] = cursorBlinkTime;
    }
    else if(keyboard_check(vk_delete) &amp;&amp; string_length(text) &gt; 0 &amp;&amp; (keyDownTime == 0 || keyDownTime &gt;= room_speed / 2))
    {
        if(selectedStart != -1)
            textbox_text_selected_remove(id);
        else
            text = string_delete(text, cursor + 1, 1);
            
        showCursor = true;
        alarm[0] = cursorBlinkTime;
    }
    else if(keyboard_check(vk_left) &amp;&amp; (keyDownTime == 0 || keyDownTime &gt;= room_speed / 2))
    {
        if(keyboard_check(vk_shift))
        {
            if(selectedStart == -1)
                selectedStart = cursor;
        }
        else
            selectedStart = -1;
            
        if(keyboard_check(vk_control))
        {
            var temp = cursor;
            cursor = string_get_highest_index(text, " ", cursor);
            if(cursor &gt; temp)
                cursor = 0;
        }
        cursor -= cursor &gt; 0;
        showCursor = true;
        alarm[0] = cursorBlinkTime;
    }
    else if(keyboard_check(vk_right) &amp;&amp; (keyDownTime == 0 || keyDownTime &gt;= room_speed / 2))
    {
        if(keyboard_check(vk_shift))
        {
            if(selectedStart == -1)
                selectedStart = cursor;
        }
        else
            selectedStart = -1;
        if(keyboard_check(vk_control))
        {
            var temp = cursor;
            cursor = string_get_lowest_index(text, " ", cursor + 1) - 1;
            if(cursor &lt; temp)
                cursor = string_length(text);
        }
        cursor += cursor &lt; string_length(text);
        showCursor = true;
        alarm[0] = cursorBlinkTime;
    }
    else if(keyboard_check(vk_control) &amp;&amp; keyboard_check(ord("C")) &amp;&amp; selectedStart != -1)
    {
        clipboard_set_text(textbox_text_selected_get(id));
    }
    else if(keyboard_check(vk_control) &amp;&amp; keyboard_check(ord("X")) &amp;&amp; selectedStart != -1)
    {
        clipboard_set_text(textbox_text_selected_get(id));
        textbox_text_selected_remove(id);
    }
    else if(keyboard_check(vk_control) &amp;&amp; keyboard_check(ord("V")) &amp;&amp; clipboard_has_text() &amp;&amp; keyDownTime == 0)
    {
        if(selectedStart != -1)
            textbox_text_selected_remove(id);
        textbox_text_insert(id, clipboard_get_text());
    }
    else if(keyboard_check(vk_control) &amp;&amp; keyboard_check(ord("A")) &amp;&amp; string_length(text) &gt; 0)
    {
        cursor = string_length(text);
        selectedStart = 0;
    }
    else if(keyboard_check(vk_end))
    {
        if(keyboard_check(vk_shift))
        {
            if(selectedStart == -1)
                selectedStart = cursor;
        }
        else
            selectedStart = -1;
        cursor = string_length(text);
    }
    else if(keyboard_check(vk_home))
    {
        if(keyboard_check(vk_shift))
        {
            if(selectedStart == -1)
                selectedStart = cursor;
        }
        else
            selectedStart = -1;
        cursor = 0;
    }
    
    else if(keyboard_string != "")
    {
        if(selectedStart != -1)
            textbox_text_selected_remove(id);
        if(keyboard_string == "#")
            textbox_text_insert(id, "\#");
        else
            textbox_text_insert(id, keyboard_string);
        keyboard_string = "";
    }
    if(keyboard_lastkey != vk_lshift &amp;&amp; keyboard_lastkey != vk_rshift &amp;&amp; keyboard_lastkey != vk_lcontrol &amp;&amp; keyboard_lastkey != vk_rcontrol)
        keyDownPrevious = keyboard_lastkey;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(selected &amp;&amp; dragSelecting)
    if(selectedStart == cursor)
        selectedStart = -1;
dragSelecting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_x &gt;= x &amp;&amp; mouse_y &gt;= y &amp;&amp; mouse_x &lt; x + sprite_width &amp;&amp; mouse_y &lt; y + sprite_height)
{
    selected = true;
    showCursor = true;
    alarm[0] = cursorBlinkTime;
    keyboard_string = "";
    selectedStart = -1;
    cursor = textbox_get_cursor_at(id, mouse_x);
    dragSelecting = true;
}
else
{
    selected = false;
    showCursor = false;
    alarm[0] = -1;
    dragSelecting = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(selected &amp;&amp; dragSelecting)
{
    if(selectedStart == -1)
        textbox_text_selected_set(id, cursor, textbox_get_cursor_at(id, mouse_x));
    else
        textbox_text_selected_set(id, selectedStart, textbox_get_cursor_at(id, mouse_x));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free the surface
surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(surf);
draw_self();
var tempAlpha = draw_get_alpha();
var tempColor = draw_get_colour();
draw_set_valign(fa_middle);


draw_text_colour(x + 2 - offset, y + sprite_height / 2, text, textColor, textColor, textColor, textColor, textAlpha);
if(showCursor)
{
    draw_line(cursorPosition, y + 2, cursorPosition, y + sprite_height - 3);
}
if(selectedStart != -1)
{
    var x1, x2;
    if(selectedStart &gt; cursor)
    {
        x1 = x + string_width(string_copy(text, 1, cursor)) + 2;
        x2 = x1 + string_width(string_copy(text, cursor + 1, selectedStart - cursor));
    }
    else
    {
        x1 = x + string_width(string_copy(text, 1, selectedStart)) + 2;
        x2 = x1 + string_width(string_copy(text, selectedStart + 1, cursor - selectedStart));
    }
    if(selected)
    {
        draw_set_alpha(selectionAlpha);
        draw_set_color(selectionColor);
    }
    else
    {
        draw_set_alpha(selectionUnfocusAlpha);
        draw_set_color(selectionUnfocusColor);
    }
    if(x1 - offset &lt; x + 1)
        x1 = x + offset;
    draw_rectangle(x1 - offset, y + 2, x2 - offset, y + sprite_height - 3, false);
    draw_set_alpha(tempAlpha);
    draw_set_color(tempColor);
}
surface_reset_target();
if(surface_exists(surf))
{
    draw_surface_part(surf, x, y, sprite_width, sprite_height, x, y);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyDownTime = 0;
keyDownPrevious = 0;
keyboard_lastkey = 0;
if(selectedStart == cursor)
    selectedStart = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
