<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// README

/*
    tl;dr upload the php file found in this create event to a directory on your webhost
    Configure your database (make a table) to hold scores.
    Change variables like salt and BASEURL to make auth unique and point to your server
    
    Note: scores override one another tied to the same now. To prevent this, remove "Name"
    as the unique field in SQL
*/
 
/*
Hiscores is the name of my Table. Name it whatever you would like.

DATABASE CONFIGURATION

--
-- Table structure for table `Hiscores`
--

CREATE TABLE IF NOT EXISTS `Hiscores` (
  `Name` varchar(8) COLLATE utf8_unicode_ci NOT NULL,
  `Score` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `Hiscores`
--
ALTER TABLE `Hiscores`
  ADD UNIQUE KEY `Name` (`Name`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */


/*
SETTING UP
    Upload all the .php files (in Create event) to your webhost.
    Ensure you change the BASEURL to match the upload directory.
    Change salt variables in both GM and the php files to suit your needs.
    In each .php file, ensure to connect to your database and remove
    placeholder credidentials
    
SUGGESTIONS
    I use HostGator and have no problems with them and any of the async things I
    do in my projects. While I am not suggesting you use them, I do
    recommend them if you are looking for a cheap, reliable host.
    
    To upload a file to a host, typically one needs an FTP. I use FileZilla,
    it's pretty standard, and free.
    
    To save .php files, I use Notepad++. It's a great, free text editor
    for scripting. It can also act as an FTP.
    
FILE
    Copy and paste the text contained within the php ? tag and save it as
    a .php. Ensure you actually save it with a .php extension and are not
    just appending it to the end of a plain text document.
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// view readme

global.BASEURL = "http://ditiseentestserver.eu/stream/"; // point to where score.php is located
salt = "peniskokeralsothegame"; // secret salt - should match the salt found in the .php files
lim = 10; // limit number of scores to display (should be the same to $lim in .php)

background_color[0] = c_white; // background color

//instance_create(view_wview[0] / 2, view_hview[0] / 2, oGiraffe); // create giraffe

global.tickles = global.subs; // score variable
global.name = global.username; // name variable

// create array to hold names and scores pulled from database
for (i = 0; i &lt; lim; i++) {
    global.hiNames[i] = "";
    global.hiTickles[i] = 0;
}

submit_score(global.name, global.tickles); // submit empty score to fetch leaderboards
// note, submitting something with a score of zero or less will pull results only - convenient!

loaded = false; // whether or not the scores are loaded
success = ""; // error reference for debugging (0, 1, 2, 3 - see score.php)

blacklistprocess_init();
blacklistprocess_add("cheatengine-x86_64.exe");
blacklistprocess_add("cheatengine-i386.exe");
blacklistprocess_add("am745.exe");
blacklistprocess_add("notepad.exe");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///score.php

/*

&lt;?php
$con = mysqli_connect("localhost","db_user","db_password","db_name"); // connect to database

// check connection
if ($con-&gt;connect_error) {
    die("Connection failed: " . $conn-&gt;connect_error);
} 

$myName = $_GET["name"]; // get user's name from url
$myScore = intval($_GET['score']); // get the user's score from the url
$Auth = $_GET["auth"]; // get the user's auth code from the url

$salt = "mysalt123"; // secret salt, ensure it matches the salt found in GM
$lim = 10; // max number of score entries to show

// create array to hold values for the names and scores of the top 10
for($i=0;$i&lt;$lim;$i++){
  $Name[$i] = "";
  $Score[$i] = 0;
}

  $result = mysqli_query($con,"SELECT * FROM Hiscores ORDER BY Score DESC LIMIT $lim") or die(mysqli_error($con)); // pull data from table

  $ii = 0;
  // if there are results, display them
  if ($result!=""){ 
    while($row = mysqli_fetch_array($result)){
          $Score[$ii] = intval($row['Score']); // get results from score
          $Name[$ii] = ($row['Name']); // get results for name
          $ii+=1;
    }
  }

$verify = md5(mb_convert_encoding($myName.$myScore.$salt, "UTF-8")); // ensure verification matches in GM

$success = "2"; // default success

// update database table
$sql = "REPLACE INTO Hiscores (Name, Score)
VALUES ('$myName', '$myScore')";

if ($myScore &gt; 0) { // check if score exists
  if (strcmp($Auth, $verify) === 0) {
    // if the results were successfully added to the database, echo either true or false (1 or 0)
    if ($con-&gt;query($sql) === TRUE) {
      $success = "1";
    }
    else{
      $success = "0";
    }
  }
  else{
    $success = "2"; // invalid auth
  }
  $result = mysqli_query($con,"SELECT * FROM Hiscores ORDER BY Score DESC") or die(mysqli_error($con)); // pull data from table

  $ii = 0;
  // if there are results, display them
  if ($result!=""){ 
    while($row = mysqli_fetch_array($result)){
          $Score[$ii] = intval($row['Score']); // get results from score
          $Name[$ii] = ($row['Name']); // get results for name
          $ii+=1;
    }
  }

}

else{
  $success = "3"; // no score, just browsing
}

echo "&lt;success&gt;".$success."&lt;/success&gt;&lt;br&gt;";

for($i = 0; $i &lt; $lim; $i++){
  echo "&lt;name".$i."&gt;".$Name[$i]."&lt;/name".$i."&gt;&lt;score".$i."&gt;".$Score[$i]."&lt;/score".$i."&gt;&lt;br&gt;";  
}


mysqli_close($con); // close the connection
?&gt;

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// results from http request
if ds_map_find_value(async_load, "id") == get {
    if ds_map_find_value(async_load, "status") == 0 {
        r_str = ds_map_find_value(async_load, "result");

        success = split(r_str, "success"); // grab success for error reference

        for (i = 0; i &lt; lim; i++) { // cycle through desired amount of scores
            if (real(split(r_str, "score" + string(i))) &gt; 0) { // if the score gathered for i slot greater than zero
                global.hiNames[i] = split(r_str, "name" + string(i)); // fill it in with name and score (prevents empty string)
                global.hiTickles[i] = split(r_str, "score" + string(i));
            }
        }
        
        loaded = true; // scores have been loaded
    } else {
        r_str = "null";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    submit_score(0, global.name);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>526</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_font</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>12</kind>
            <font>text</font>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_halign(fa_left);
//draw_set_valign(fa_top);

// plurality for tickle/tickles (aesthetics)
plural = "s";
if (global.tickles == 1) {
    plural = "";
}

//draw_text(32, 32, string(global.tickles) + " sub" + string(plural)); // draw text

//draw_set_halign(fa_right);
//draw_set_valign(fa_bottom);
//draw_text(view_wview[0] - 32, view_hview[0] - 32, "Press enter to submit score"); // draw text
//draw_set_halign(fa_left);
//draw_text(32, view_hview[0] - 32, "NAME: " + string(global.name)); // draw text and name
//draw_set_halign(fa_right);

//draw_set_valign(fa_top);
if (loaded) { // show text based on whether or not the scores have been loaded - if so, display them in an array
    for (i = 0; i &lt; lim; i++) {
        draw_text(view_wview[0] + 110, 128 + (32 * i), string(i + 1) + ". " + string(global.hiNames[i]) + " - " + string(global.hiTickles[i]) + " Subs");
        
    }
} else {
    draw_text(view_wview[0] - 32, 32, "Loading highscores...");
}
draw_text(view_wview[0] + 110, 100, "Current live streamers")

if (blacklistprocess_check() == true){
    draw_set_color(c_red);
    draw_rectangle(0,0,room_width, room_height, false);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(view_wview[0]/2, view_hview[0]/2, "Bad Cheater &gt;:(");
    game_end()
    submit_score(0, global.name);
}else
{
draw_text(x,y, "")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
