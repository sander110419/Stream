<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGiraffe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a = 0; // used as argument for sin/cos for wobble effect
int = 0; // wobble intensity division

// destination xscale and yscale
dx = 1;
dy = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a += 0.1; // used in conjunction with sin/cos waves

int += 1; // gradual decline in wobble

dx = 1 + sin(a) / int; // horizontal shrink
dy = 1 + cos(a) / int; // vertical shrink

// ease the scaling so it's a smooth process
if (image_xscale &lt; dx) {
    image_xscale += (dx - image_xscale) / 5;
}

if (image_yscale &lt; dy) {
    image_yscale += (dy - image_yscale) / 5;
}

if (image_xscale &gt; dx) {
    image_xscale -= (image_xscale - dx) / 5;
}

if (image_xscale &gt; dy) {
    image_yscale -= (image_yscale - dy) / 5;
}

// check if mouse is touching giraffe
if (collision_point(mouse_x, mouse_y, id, 1, 0) &amp;&amp; mouse_check_button_pressed(mb_left)) {
    global.tickles++; // increase score
    int = 0; // reset decline
    a = 0; // reset sin/cos argument
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
