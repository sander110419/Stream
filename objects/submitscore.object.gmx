<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// view readme

global.BASEURL = "http://ditiseentestserver.eu/stream/"; // point to where score.php is located
salt = "peniskokeralsothegame"; // secret salt - should match the salt found in the .php files
lim = 10; // limit number of scores to display (should be the same to $lim in .php)

randomize(); // set random seed to generate random names
background_color[0] = c_white; // background color

//instance_create(view_wview[0] / 2, view_hview[0] / 2, oGiraffe); // create giraffe

global.tickles = global.subs; // score variable
global.name = global.username; // name variable

// generate 8 character random name for simplicity -- you have the source now. Change it! :D

// create array to hold names and scores pulled from database
for (i = 0; i &lt; lim; i++) {
    global.hiNames[i] = "";
    global.hiTickles[i] = 0;
}

submit_score(global.name, global.tickles); // submit empty score to fetch leaderboards
// note, submitting something with a score of zero or less will pull results only - convenient!

loaded = false; // whether or not the scores are loaded
success = ""; // error reference for debugging (0, 1, 2, 3 - see score.php)

submit_score(global.tickles, global.name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// when the user presses space, submit their score (first argument) and name (second argument)
if (keyboard_check_pressed(vk_enter)) {
    submit_score(global.tickles, global.name);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// results from http request
if ds_map_find_value(async_load, "id") == get {
    if ds_map_find_value(async_load, "status") == 0 {
        r_str = ds_map_find_value(async_load, "result");

        success = split(r_str, "success"); // grab success for error reference

        for (i = 0; i &lt; lim; i++) { // cycle through desired amount of scores
            if (real(split(r_str, "score" + string(i))) &gt; 0) { // if the score gathered for i slot greater than zero
                global.hiNames[i] = split(r_str, "name" + string(i)); // fill it in with name and score (prevents empty string)
                global.hiTickles[i] = split(r_str, "score" + string(i));
            }
        }
        
        loaded = true; // scores have been loaded
    } else {
        r_str = "null";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(merge_color(c_red, c_white, 0.5));
draw_set_font(fntNormal);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

// plurality for tickle/tickles (aesthetics)
plural = "s";
if (global.tickles == 1) {
    plural = "";
}

draw_text(32, 32, string(global.tickles) + " sub" + string(plural)); // draw text

draw_set_color(c_ltgray);
draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_set_font(fntSmall);
//draw_text(view_wview[0] - 32, view_hview[0] - 32, "Press enter to submit score"); // draw text
draw_set_halign(fa_left);
draw_text(32, view_hview[0] - 32, "NAME: " + string(global.name)); // draw text and name
draw_set_halign(fa_right);

draw_set_valign(fa_top);
draw_set_color(merge_color(c_blue, c_white, 0.5));
if (loaded) { // show text based on whether or not the scores have been loaded - if so, display them in an array
    for (i = 0; i &lt; lim; i++) {
        draw_text(view_wview[0] - 32, 32 + (32 * i), string(i + 1) + ". " + string(global.hiNames[i]) + " - " + string(global.hiTickles[i]));
    }
} else {
    draw_text(view_wview[0] - 5, 32, "Loading highscores...");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
